import { action, KeyDownEvent, SingletonAction, DialRotateEvent, DidReceiveSettingsEvent, DialDownEvent, DidReceiveGlobalSettingsEvent, WillAppearEvent } from "@elgato/streamdeck";
import streamDeck from '@elgato/streamdeck';
import WebSocket from 'ws';

// / <reference path="@elgato/streamdeck" />

// let defVal = 50;
// let reconnectInterval = 5000;
let camIp: any = null;
let camPort: any = null;
const incrdB = 1; // dB change per tick
let ws: any = null; // Declare a variable to hold the WebSocket connection
// let inContext: any = null;
let volValue: any = null;
let dimOn: boolean = false;
let camSocketOpen: boolean = false;
let globSettings: GlobalSettings = {};
// let actionObj: object = {}

interface GlobalSettings {
	camillaIP?: string;
	camillaPORT?: string;
	camSocketOpen?: boolean;
	[key: string]: any; // Add this to allow for additional properties
}



async function handleGlobalSettings(settings: GlobalSettings) {
    console.log('Received global settings:', JSON.stringify(settings, null, 2));
    globSettings = settings;

    const previousIp = camIp;
    const previousPort = camPort;

    if (settings.camillaIP) camIp = settings.camillaIP;
    if (settings.camillaPORT) camPort = settings.camillaPORT;
    
    console.log(`IP: ${previousIp} -> ${camIp}`);
    console.log(`Port: ${previousPort} -> ${camPort}`);

    if (camIp && camPort) {
        try {
            console.log(`Attempting to connect to WebSocket at ws://${camIp}:${camPort}`);
            const response = await sendWebSocketMessage(
                camIp,
                camPort,
                "GetVolume"
            );

            if (response.success) {
                camSocketOpen = true;
                globSettings.camSocketOpen = camSocketOpen;
                console.log('Successfully connected to WebSocket');
                await streamDeck.settings.setGlobalSettings(globSettings);
                console.log('Updated global settings with connection status');

                if (response.data?.GetVolume) {
                    const previousVolume = volValue;
                    volValue = Math.round(response.data.GetVolume.value);
                    console.log(`Volume updated: ${previousVolume} -> ${volValue}`);
                } else {
                    console.warn('GetVolume response missing expected data structure');
                }
            } else {
                console.error(`Failed to get initial volume: ${response.error}`);
                console.debug('Full response:', JSON.stringify(response, null, 2));
            }
        } catch (error) {
            console.error('Failed to initialize connection:', error);
            console.debug('Stack trace:', error instanceof Error ? error.stack : 'No stack trace available');
        }
    } else {
        console.warn('Missing IP or Port configuration:', { camIp, camPort });
    }
}

// Initial settings load
console.log('Loading initial global settings...');
streamDeck.settings.getGlobalSettings()
    .then(handleGlobalSettings)
    .catch((error) => {
        console.error('Failed to get global settings:', error);
        console.debug('Stack trace:', error instanceof Error ? error.stack : 'No stack trace available');
    });

// Settings change handler
streamDeck.settings.onDidReceiveGlobalSettings((ev: DidReceiveGlobalSettingsEvent<GlobalSettings>) => {
    console.log('Received settings update event');
	handleGlobalSettings(ev.settings)
        .catch((error) => {
            console.error('Failed to handle global settings update:', error);
            console.debug('Stack trace:', error instanceof Error ? error.stack : 'No stack trace available');
        });
});

interface WebSocketResponse {
	success: boolean;
	data?: any;
	error?: string;
}

async function sendWebSocketMessage(
	ip: string,
	port: number,
	message: string | object
): Promise<WebSocketResponse> {
	return new Promise((resolve) => {
		try {
			const ws = new WebSocket(`ws://${ip}:${port}`);

			const timeoutId = setTimeout(() => {
				ws.close();
				resolve({
					success: false,
					error: 'Connection timeout after 5 seconds'
				});
			}, 5000);

			ws.onopen = () => {
				const messageString = typeof message === 'string'
					? message
					: JSON.stringify(message);

				ws.send(messageString);
			};

			ws.onmessage = (event) => {
				clearTimeout(timeoutId);
				try {
					const data = JSON.parse(event.data.toString());
					resolve({
						success: true,
						data: data
					});
				} catch (e) {
					resolve({
						success: false,
						error: 'Failed to parse response data'
					});
				}
				ws.close();
			};

			ws.onerror = (error) => {
				clearTimeout(timeoutId);
				resolve({
					success: false,
					error: `WebSocket error: ${error}`
				});
				ws.close();
			};

		} catch (error) {
			resolve({
				success: false,
				error: `Failed to create WebSocket connection: ${error}`
			});
		}
	});
}



@action({ UUID: "com.alexander-vyverman.camilladsp.volume" })
export class Volume extends SingletonAction {
	constructor() {
		super();
	}

	async onWillAppear(ev: WillAppearEvent<object>): Promise<void> {

	}

	async onDialRotate(ev: DialRotateEvent<object>) {
		if (!camIp || !camPort) return;

		const dialVal = volValue + ev.payload.ticks;
		if (dialVal <= 0 && dialVal >= -80) {
			const response = await sendWebSocketMessage(
				camIp,
				camPort,
				{ "AdjustVolume": ev.payload.ticks }
			);

			if (response.success) {
				// Handle successful response
				const data = response.data;
				if (data.AdjustVolume) {
					volValue = Math.round(data.AdjustVolume.value);
					ev.action.setFeedback({
						value: volValue,
						indicator: {
							value: ((volValue + 80) / 80) * 100,
							enabled: true
						}
					});
				}
			} else {
				console.error(response.error);
			}
		}
	}

	async onDialDown(ev: DialDownEvent<object>) {
		if (!camIp || !camPort) return;
		
		dimOn = !dimOn;
		console.log("dial down pressed");
		
		const dimVol = dimOn ? volValue - 20 : volValue + 20;
		volValue = Math.min(Math.max(dimVol, -80), 100); // Clamp between -80 and 100
		
		const response = await sendWebSocketMessage(
			camIp,
			camPort,
			{ "SetVolume": volValue }
		);
	
		if (response.success) {
			ev.action.setFeedback({ 
				title: dimOn ? "DIM ON" : "Volume",
				value: volValue,
				indicator: {
					value: ((volValue + 80) / 80) * 100,
					enabled: true
				}
			});
		} else {
			console.error('Failed to set volume:', response.error);
		}
	}



}


